name: Develop Server Integrator (CI)

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      head:
        description: 'Head version number'
        required: true
        default: '0'

permissions:
  id-token: write
  contents: read

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::949653644001:role/github_Mugeon_ecs_test_OIDC
          role-session-name: GitHubActions-ECS-Deploy-${{ github.run_id }}
          aws-region: ap-northeast-2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 --match "[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Generate HeadVer version
        id: generate_version
        run: |
          IFS='.' read -ra version_parts <<< "${{ steps.get_tag.outputs.latest_tag }}"
          head=${{ github.event.inputs.head }}
          if [ -z "$head" ]; then
            head=${version_parts[0]}
          fi
          yearweek=$(date +%y%W)
          build=${{ github.run_number }}
          version="${head}.${yearweek}.${build}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "head=$head" >> $GITHUB_OUTPUT
          echo "yearweek=$yearweek" >> $GITHUB_OUTPUT
          echo "build=$build" >> $GITHUB_OUTPUT

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecs-be-prod
          IMAGE_TAG: ${{ steps.generate_version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Verify AWS Authentication
        run: |
          echo "🔐 Testing AWS Authentication..."
          aws sts get-caller-identity
          echo "✅ AWS Authentication successful!"
          echo "📦 Built and pushed image: $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.generate_version.outputs.version }}"