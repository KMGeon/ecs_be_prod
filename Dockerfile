################################################################################
# Multi-Stage Docker Build for Spring Boot Application
# 
# 이 Dockerfile은 2단계 빌드 프로세스를 사용합니다:
# 1. Build Stage: 소스 코드를 컴파일하고 JAR 파일 생성
# 2. Runtime Stage: 최종 실행 이미지 생성 (경량화된 이미지)
#
# 장점:
# - 최종 이미지 크기 최소화 (빌드 도구 제외)
# - 보안 강화 (소스 코드가 최종 이미지에 포함되지 않음)
# - 빌드와 런타임 환경 분리
################################################################################

# ==============================================================================
# STAGE 1: BUILD STAGE (빌드 단계)
# ==============================================================================
# gradle:8-jdk17 - Gradle 8과 JDK 17이 포함된 이미지
# ARM64 및 AMD64 플랫폼 모두 지원
# AS build - 이 스테이지를 'build'라는 이름으로 참조할 수 있게 함
FROM --platform=linux/amd64 gradle:8-jdk17 AS build

# 컨테이너 내부의 작업 디렉토리를 /app으로 설정
# 이후 모든 명령어는 이 디렉토리에서 실행됨
WORKDIR /app

# ------------------------------------------------------------------------------
# Gradle 설정 파일 복사
# ------------------------------------------------------------------------------
# build.gradle.kts - Kotlin DSL로 작성된 빌드 설정 파일
# settings.gradle.kts - 프로젝트 설정 파일 (프로젝트 이름 등)
# gradlew - Gradle Wrapper 실행 스크립트 (Unix/Linux용)
COPY build.gradle.kts settings.gradle.kts gradlew ./

# gradle/ 디렉토리 - Gradle Wrapper JAR 파일과 설정이 포함됨
COPY gradle gradle

# ------------------------------------------------------------------------------
# 의존성 사전 다운로드 (캐싱 최적화)
# ------------------------------------------------------------------------------
# --no-daemon: Gradle 데몬을 사용하지 않음 (컨테이너에서는 불필요)
# 이 단계를 별도로 실행하면 소스 코드가 변경되어도 
# 의존성이 변경되지 않는 한 캐시를 재사용할 수 있음
RUN ./gradlew dependencies --no-daemon

# ------------------------------------------------------------------------------
# 전체 소스 코드 복사
# ------------------------------------------------------------------------------
# 현재 디렉토리의 모든 파일을 컨테이너의 현재 작업 디렉토리(/app)로 복사
# .dockerignore 파일에 명시된 파일/디렉토리는 제외됨
COPY . .

# ------------------------------------------------------------------------------
# Spring Boot JAR 파일 빌드
# ------------------------------------------------------------------------------
# bootJar: Spring Boot 실행 가능한 JAR 파일 생성
# 결과물: build/libs/*.jar 파일이 생성됨
RUN ./gradlew bootJar --no-daemon

# ==============================================================================
# STAGE 2: RUNTIME STAGE (실행 단계)
# ==============================================================================
# openjdk:17-jdk-slim - JDK 17 슬림 버전 (불필요한 도구 제외, 약 400MB)
# 빌드 도구(Gradle)와 소스 코드가 포함되지 않아 이미지 크기가 작음
FROM --platform=linux/amd64 openjdk:17-jdk-slim

# 컨테이너 내부의 작업 디렉토리를 /app으로 설정
WORKDIR /app

# ------------------------------------------------------------------------------
# 빌드 스테이지에서 생성된 JAR 파일 복사
# ------------------------------------------------------------------------------
# --from=build: 'build' 스테이지에서 파일을 복사
# /app/build/libs/*.jar: 빌드된 Spring Boot JAR 파일
# app.jar: 최종 이미지에서 사용할 파일 이름
COPY --from=build /app/build/libs/*.jar app.jar

# ------------------------------------------------------------------------------
# 포트 노출 선언
# ------------------------------------------------------------------------------
# 8080 포트를 외부에 노출 (Spring Boot 기본 포트)
# 실제 포트 바인딩은 docker run -p 옵션으로 수행
EXPOSE 8080

# ------------------------------------------------------------------------------
# 애플리케이션 실행 명령
# ------------------------------------------------------------------------------
# ENTRYPOINT: 컨테이너가 시작될 때 실행할 명령
# java -jar app.jar: Spring Boot 애플리케이션 실행
ENTRYPOINT ["java", "-jar", "app.jar"]